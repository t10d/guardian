name: Continuous Integration Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*'
    pull_request:


env:
  DEFAULT_PYTHON_VERSION: '3.7'
  WAIT_TIMEOUT_SECS: 300

jobs:
  test: 
    name: Test suite 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Set-up python
        uses: actions/setup-python@v1
      - name: Install poetry
        uses: Gr1N/setup-poetry@v4

      - name: Loads poetry cached libraries
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-venv

      - name: Create virtual environment
        run: python -m venv create .venv

      - name: Set-up virtual environment
        # Tells to poetry to look for python installation under .venv/
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        # Using Makefile that calls poetry.
        run: make install

      - name: Run tests!
        run: make test

  deploy:
    name: Deploy to PyPi
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Set-up python
        uses: actions/setup-python@v1
      - name: Install poetry
        uses: Gr1N/setup-poetry@v4

      - name: Loads poetry cached libraries
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-venv

      - name: Create virtual environment
        if: (steps.poetry-cache.outputs.cache-hit != 'true')
        run: python -m venv create .venv

      - name: Set-up virtual environment
        # Tells to poetry to look for python installation under .venv/
        run: poetry config virtualenvs.in-project true

      - name: Install dependencies
        # Using Makefile that calls poetry.
        run: make install

      - name: Build distros ðŸ’ª
        run: poetry build

      - name: Publish to PyPI ðŸ“¦
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
